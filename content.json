{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/04/14/hello-world/"},{"title":"美团面经-1","text":"面经来源：美团后端实习一面面经 c++ 1. C++的内存管理分哪些区，分别有什么作用 C++的内存主要分为五大区：堆区、栈区、自由存储区、全局/静态存储区、常量存储区。 堆区：程序员分配释放，使用new分配内存块，使用delete归还内存空间。 栈区：编译器自动分配释放，用于存放局部变量、函数参数等。 自由存储区：程序员分配释放，使用malloc分配内存块，使用free归还内存空间。 全局区/静态区：全局变量和静态变量分配在同一块内存中。 常量存储区：存放不可修改的常量值。 2. C++源文本到可执行文件需要经历哪些阶段预处理：将源代码和相关头文件处理成一个.i文件。 编译：将预处理的文件进行词法分析、语义分析，优化后产生相应的汇编代码。 汇编：将汇编语言代码翻译成目标机器码。 链接：把每个机器码文件按照要求连接起来，解决代码间的相互依赖问题。 3. 析构函数为什么必须是虚函数为了保证整个派生类的对象完全被释放。 当析构函数不为虚函数时，在删除基类指针时，只会调用基类析构函数，而不调用派生类的析构函数，这样会导致基类指针指向的派生类对象析构不完全。 当析构函数为虚函数时，在删除基类指针时，会调用该指针指向派生类的析构函数，同时派生类的析构函数自动调用基类析构函数，保证对象被完全释放。","link":"/2020/04/15/%E7%BE%8E%E5%9B%A2%E9%9D%A2%E7%BB%8F-1/"}],"tags":[{"name":"美团","slug":"美团","link":"/tags/%E7%BE%8E%E5%9B%A2/"},{"name":"C++","slug":"C","link":"/tags/C/"},{"name":"操作系统","slug":"操作系统","link":"/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"}],"categories":[{"name":"面经","slug":"面经","link":"/categories/%E9%9D%A2%E7%BB%8F/"}]}